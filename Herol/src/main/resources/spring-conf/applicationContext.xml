<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- 数据库文件 <context:property-placeholder>标签在Spring配置文件中只能存在一份
	那如果有多个配置文件怎么办呢？那就多个文件之间以“,”分隔，如下：
    <context:property-placeholderlocation="classpath:db.properties,classpath:monitor.properties" />
    location：表示属性文件位置，多个之间通过如逗号/分号等分隔； 
	file-encoding：文件编码； 
	ignore-resource-not-found：如果属性文件找不到，是否忽略，默认false，即不忽略，找不到将抛出异常 
	ignore-unresolvable：是否忽略解析不到的属性，如果不忽略，找不到将抛出异常 
	properties-ref：本地java.util.Properties配置 
	local-override：是否本地覆盖模式，即如果true，那么properties-ref的属性将覆盖location加载的属性 
	system-properties-mode：系统属性模式，ENVIRONMENT（默认），NEVER，OVERRIDE 
	ENVIRONMENT：将使用Spring 3.1提供的PropertySourcesPlaceholderConfigurer，其他情况使用Spring 3.1之前的PropertyPlaceholderConfigurer 
	OVERRIDE： PropertyPlaceholderConfigurer使用，因为在spring 3.1之前版本是没有Enviroment的，所以OVERRIDE是spring 3.1之前版本的Environment 
	NEVER：只查找properties-ref、location； 
	order：当配置多个<context:property-placeholder/>时的查找顺序 
-->
	<context:property-placeholder file-encoding="UTF-8" location="classpath:datasource.properties" ignore-unresolvable="true" />
	
<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
	<property name="driverClassName" value="${jdbc.driverClassName}"/> <property 
	name="url" value="${jdbc.url}"/> </bean> 
-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		
		 <!-- Connection Pooling Info -->
		 <!-- 最小连接池数量 -->
		 <property name="minIdle" value="${jdbc.minIdle}" />
		 <!-- 最大连接池数量 -->
		 <property name="maxActive" value="${jdbc.maxActive}" />
		 <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		 <property name="initialSize" value="${jdbc.initialSize}" />
		 <!-- 配置获取连接等待超时的时间，单位毫秒 -->
		 <property name="maxWait" value="${jdbc.maxWait}" />
		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
 		 <property name="timeBetweenEvictionRunsMillis" value="60000" />
 		 <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
		 <property name="minEvictableIdleTimeMillis" value="300000" />
		 <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
  		 <property name="poolPreparedStatements" value="true" /> 
  		 <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
  		 <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
  		 <property name="validationQuery" value="select 1 " />
 		 <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall -->
		 <property name="filters" value="config,wall" />
		 <!--合并多个数据源 -->
		 <property name="useGlobalDataSourceStat" value="true" />
		 <property name="proxyFilters"> 
		   <list> 
		     <ref bean="logFilter" /> 
		     <ref bean="statFilter" />
		   </list> 
		 </property>
	</bean>
	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
		<property name="statementExecutableSqlLogEnable" value="false" />
	</bean>
	<bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
<!-- 通常情况下我们在创建spring项目的时候在xml配置文件中都会配置这个标签，
	配置完这个标签后，spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，
	如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，
	则把这些类注册为bean 
	注：在注解后加上例如@Component(value=”abc”)时，注册的这个类的bean的id就是adc. 
-->
	<context:component-scan base-package="com.hjc.herol.herolrouter" />
	<!-- enable autowire -->
	<context:annotation-config />
	<!-- enable transaction demarcation with annotations -->
 	<tx:annotation-driven />
	<!-- 定义事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值。 -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可 
				read-only="true" 表示只读 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义 Autowired 自动注入 bean -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<!-- hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=update
				<!-- 是否在控制台显示sql -->
				hibernate.show_sql=true
				<!-- 是否格式化sql，优化显示 -->
				hibernate.format_sql=true
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询最大数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				hibernate.jdbc.batch_size=50
				<!-- 是否自动提交事务 -->
				hibernate.connection.autocommit=true
				<!-- 指定hibernate在何时释放JDBC连接 -->
				hibernate.connection.release_mode=auto
				<!-- 创建session方式 hibernate4.x 的方式  如果使用的是本地事务（jdbc事务）thread-->
				hibernate.current_session_context_class=thread
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
						所以把它设置为none即可 -->
				javax.persistence.validation.mode=none
			</value>
		</property>
		<!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类 -->
		<property name="packagesToScan" value="com.hjc.herol.herolrouter" />
	</bean>
	
	<bean class="com.hjc.herol.herolrouter.client.service.AccountService" id="account" />
</beans>